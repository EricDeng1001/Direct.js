/*
**   Antinux Innovation
**   Author: Eric Deng
*/
import React from 'react';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import Button from 'UI/Button';
import * as actionCreators from 'actions';
import LoginForm from 'LoginForm';
import SignUpForm from 'SignUpForm';

import applyHOCs from 'renext/applyHOCs';
import asyncProcessControl from 'renext/asyncProcessControl';

import style from 'style';


//@flow

type Props = {
  onCancel: () => any,
  onSuccess: () => any
};

class UserManager extends React.PureComponent<Props> {
  state = {
    login: true,
  }

  signup = () => {
    this.setState({
      login: false
    });
  }

  goLogin = () => {
    this.setState({
      login: true
    });
  }

  render(){
    const {
      onCancel,
      login,
      signup,
      logout,
      toggleRememberPassword,
      rememberPassword,
      keepLogin,
      toggleKeepLogin,
      initName,
      initPassword,
      authorized,
      userExist,
      userNotExist,
      passwordWrong
    } = this.props;
    if( authorized ){
      return (
        <h1>
          You are authorized
        </h1>
      );
    }
    return (
      <React.Fragment>
      {
        this.state.login ?
          <LoginForm
            passwordWrong={passwordWrong}
            userNotExist={userNotExist}
            initName={initName}
            initPassword={initPassword}
            rememberPassword={rememberPassword}
            onToggleRememberPassword={toggleRememberPassword}
            keepLogin={keepLogin}
            onToggleKeepLogin={toggleKeepLogin}
            onLogin={login}
            onCancel={onCancel}
            goSignUp={this.signup}
          />
          :
          <SignUpForm
            initName={initName}
            initPassword={initPassword}
            userExist={userExist}
            onSignUp={signup}
            onCancel={this.goLogin}
          />
      }
      </React.Fragment>
    );
  }
};

export default applyHOCs([
  asyncProcessControl({
    loginState: {
      onResolved({ authorized , onSuccess }){
        if( authorized === 0 ){
          onSuccess();
        }
      }
    },
    signupState: {
      onResolved({ signupStatus }){
        if( !signupStatus ){
          this.goLogin();
        }
      }
    }
  }),
  connect(
    ({ UserManager: state }) => ({
      authorized: state.loginStatus === 0,
      signupStatus: state.signupStatus,
      userExist: state.signupStatus === 1 || state.loginStatus === 2 || state.loginStatus === 0,
      userNotExist: state.loginStatus === 1,
      passwordWrong: state.loginStatus === 2,
      rememberPassword: state.rememberPassword,
      keepLogin: state.keepLogin,
      loginState: state.loginState,
      signupState: state.signupState,
      logoutState: state.logoutState,
      readUserInfoState: state.readUserInfoState,
      initName: state.userid,
      initPassword: state.password
    }),
    dispatch => bindActionCreators( actionCreators , dispatch )
  )
] , UserManager );
