import React from 'react';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import Button from 'UI/Button';
import * as actionCreators from 'actions';
import LoginForm from 'UI/LoginForm';
import SignUpForm from 'UI/SignUpForm'

import applyHOCs from 'HOC/applyHOCs';
import asyncProcessControl from 'HOC/asyncProcessControl';

import style from 'style';

class UserManager extends React.PureComponent {
  state = {
    login: true
  }

  signup = () => {
    this.setState({
      login: false
    });
  }

  goLogin = () => {
    this.setState({
      login: true
    });
  }

  render(){
    const { onCancel , login , signup , initName , initPassword , authorized , userExist } = this.props;
    return (
      <React.Fragment>
      {
        this.state.login ?
          <LoginForm
            passwordWrong={authorized === 2}
            userNotExist={authorized === 1}
            initName={initName}
            initPassword={initPassword}
            onLogin={login}
            onCancel={onCancel}
            goSignUp={this.signup}
          />
          :
          <SignUpForm
            userExist={userExist}
            onSignUp={signup}
            onCancel={this.goLogin}
          />
      }
      </React.Fragment>
    );
  }
};

export default applyHOCs([
  asyncProcessControl({
    loginState: {
      onResolved({ authorized , onSuccess }){
        if( authorized === 0 ){
          onSuccess();
        }
      },
      onRejected(){

      }
    }
  }),
  connect(
    ({ UserManager: state }) => ({
      authorized: state.authorized,
      loginState: state.loginState,
      initName: state.userid,
      initPassword: state.password
    }),
    dispatch => bindActionCreators( actionCreators , dispatch )
  )
] , UserManager );
