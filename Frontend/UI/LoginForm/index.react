/*
**   Antinux Innovation
**   Author: Eric Deng
*/
import React from 'react';
import { FormGroup , ControlLabel , FormControl } from 'react-bootstrap';
import ButtonControlPane from 'UI/ButtonControlPane';

class LoginForm extends React.Component {
  static defaultProps = {
    initName: "",
    initPassword: ""
  }

  constructor( props ){
    super( props );
    this.state = {
      userid: props.initName,
      useridValid: null,
      password: props.initPassword,
      passwordValid: null
    };
  }

  render(){
    const { userNotExist , passwordWrong , onCancel , goSignUp } = this.props;
    const { useridValid , passwordValid } = this.state;
    var useridValidationState = null;
    var passwordValidationState = null;
    var useridPrompt = null;
    var passwordPrompt = null;
    if( useridValid && passwordValid ){
      if( userNotExist ){
        useridValidationState = "warning";
        useridPrompt = "userid not exist";
      }
      else {
        useridValidationState = "success";
      }
      if( passwordWrong && !userNotExist ){
        passwordValidationState = "warning";
        passwordPrompt = "password wrong";
      }
      else {
        passwordValidationState = "success";
      }
    }
    else {
      if( useridValid !== null ){
        useridValidationState = "warning";
      }
      if( passwordValid !== null ){
        passwordValidationState = "warning";
      }
    }
    return (
      <div className="fullSpaceBFC">
        <form>
          <FormGroup
            controlId="userLoginUsername"
            validationState={useridValidationState}
            onSubmit={this.onLogin}
          >
            <ControlLabel>userid</ControlLabel>
            <FormControl
              type="text"
              value={this.state.userid}
              placeholder="your userid"
              onChange={this.inputUsername}
              onKeyDown={this.onKeyDown}
            />
            <FormControl.Feedback />
            {
              useridPrompt
            }
          </FormGroup>
          <FormGroup
            controlId="userLoginUsername"
            validationState={passwordValidationState}
          >
            <ControlLabel>password</ControlLabel>
            <FormControl
              type="password"
              value={this.state.password}
              placeholder="your password"
              onChange={this.inputPassword}
              onKeyDown={this.onKeyDown}
            />
            <FormControl.Feedback />
            {
              passwordPrompt
            }
          </FormGroup>
          <ButtonControlPane
            mainAction={{
              action: this.onLogin,
              text: "login"
            }}
            additionalActions={[{
              action: onCancel,
              text: "cancel"
            },{
              action: goSignUp,
              text: "sign up"
            }]}
          />
        </form>
      </div>
    );
  }

  onLogin = () => {
    const { userid , password } = this.state;
    if( userid.trim() && password.trim() ){
      this.props.onLogin({
        userid: this.state.userid,
        password: this.state.password
      });
      this.setState({
        useridValid: true,
        passwordValid: true
      })
    }
    else {
      this.setState({
        useridValid: userid.trim() ? null : false,
        passwordValid: password.trim() ? null : false
      });
      setTimeout( () => this.setState({
        useridValid: null,
        userid: userid.trim(),
        passwordValid: null,
        password: password.trim()
      }) , 2000 );
    }
  }

  onKeyDown = ev => {
    if( ev.key === 'Enter' ){
      this.onLogin();
    }
  }

  inputUsername = ev => {
    this.setState({
      userid: ev.target.value
    });
  }

  inputPassword = ev => {
    this.setState({
      password: ev.target.value
    });
  }
};

export default LoginForm;
