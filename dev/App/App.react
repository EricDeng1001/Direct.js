import React from 'react';
import { connect } from 'react-redux';
import { BrowserRouter } from 'react-router-dom';
import AnimatedPages from 'AnimatedPages';
import { bindActionCreators } from 'redux';
import * as windowActions from 'WindowManager/actions';
import Alert from 'Windows/Alert';
import windows from 'windows';
import "Styles/global.less";

class MaskedRoutes extends React.PureComponent {
  positioned = [];
  render(){
    const { Windows , masked , alertText , closeAlert } = this.props;
    return (
      <div
        className="container"
        onDragOver={this.allowDrop}
        onDrop={this.drop}
      >
      <div className={alertText ? windows.alertMask : ''} >
      {
        alertText ? <Alert /> : null
      }
      </div>
      <div className={masked ? windows.masked : windows.positionSystem} >
      {
        Windows.map( Window =>
          <Window.Component
            position={this.position( Window.id )}
            width="200px"
            height="200px"
            {...Window.props}
            windowId={Window.id}
            key={Window.id}
          />
        )
      }
      </div>
      <BrowserRouter>
        <AnimatedPages />
      </BrowserRouter>
    </div>
    );
  }

  position = ( id ) => {
    if( !this.positioned[id] ){
      this.positioned[id] = {
        left: 40 + ( id / 20 ) + ( id % 20 ) * 20 + 'px',
        top: 40 + ( id % 20 ) * 20 +'px',
        right: 'auto',
        bottom: 'auto'
      };
    }
    return this.positioned[id];
  }

  allowDrop( ev ){
    return ev.preventDefault();
  }

  drop = ( ev ) => {
    var [ x , y , id ] = ev.dataTransfer.getData("text/plain").split(',');
    var dm = document.getElementById( 'modal__' + id );
    var newLeft = ( ev.clientX + parseInt( x , 10 ) ) + 'px';
    var newTop = ( ev.clientY + parseInt( y , 10 ) ) + 'px';
    dm.style.left = newLeft;
    dm.style.top = newTop;
    this.positioned[id] = {
      x: newLeft,
      y: newTop
    };
    return ev.preventDefault();
  }

};

export default connect(
  state => ({
    Windows: state.WindowManager.Windows,
    masked: state.WindowManager.masked,
    alertText: state.WindowManager.alert
  }),
  dispatch => bindActionCreators( windowActions , dispatch )
)( MaskedRoutes );
